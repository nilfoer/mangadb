@charset "utf-8";

/* open-sans-regular - latin */
@font-face {
  font-family: 'Open Sans';
  font-style: normal;
  font-weight: 400;
  src: local('Open Sans Regular'), local('OpenSans-Regular'),
       url('../static/webfonts/open-sans-v15-latin-regular.woff2') format('woff2'), /* Chrome 26+, Opera 23+, Firefox 39+ */
       url('..static/webfonts/open-sans-v15-latin-regular.woff') format('woff'); /* Chrome 6+, Firefox 3.6+, IE 9+, Safari 5.1+ */
}

// 1. Import bulma initial variables
@import "../bulma-0.9.1/sass/utilities/initial-variables";  // $primary etc.
@import "../bulma-0.9.1/sass/utilities/functions";  // for findLightColor findDarkColor findColorInvert etc.

// 2. Set your own initial variables
$grey-darker-mdb: #191919;
$grey-dark-mdb: hsl(0, 0%, 14%);// same as $black-ter//#2d2d2d;
// $purple: #a233a5;
$pink: #ff2871;
$blue: #1498ff; //custom
// $dark: #2d2d2d;
$red: #e42323; //custom
$mdb-green: #209520; //#31c131;
$green: $mdb-green;
$mdb-warning: #f05252;

// 3. Set the derived variables
// Update Bulma's global variables
$family-sans-serif: "Open Sans", sans-serif;
//$grey-dark: $brown;
//$grey-light: $beige-light;
$primary: $blue;
//$widescreen-enabled: true;
//$fullhd-enabled: true;
$scheme-main: $grey-dark-mdb;
$scheme-invert: #fff;
$scheme-main-bis: lighten($scheme-main, 15%);
$scheme-invert-bis: hsl(0, 0%, 96%);
$scheme-main-ter: lighten($scheme-main-bis, 15%);
$scheme-invert-ter: hsl(0, 0%, 86%);

$text: $scheme-invert-bis;
$text-strong: #7bc5ff;
$link: $scheme-invert;
$link-invert: $link;
$link-hover: $link;//lighten($primary, 15%);
//$link-hover-border: $primary;
$title-color: $scheme-invert-bis;

// Update some of Bulma's component variables
$body-background-color: $grey-darker-mdb;
$background: $scheme-main-ter; // e.g. for hover
$control-border-width: 2px;
// $input-border-color: transparent;
// $input-shadow: none;
$input-placeholder-color: $scheme-invert-ter;
$input-background-color: $grey-darker-mdb;
$input-color: $scheme-invert-bis;

$navbar-height: 2.5rem;
$navbar-padding-vertical: 0.75rem;
$navbar-padding-horizontal: 1.5rem;
$navbar-item-hover-color: $text;
$navbar-item-hover-background-color: $scheme-main-bis;
$navbar-dropdown-item-hover-color: $text;
$navbar-dropdown-item-hover-background-color: $scheme-main-bis;
$navbar-dropdown-item-active-color: $primary;
$navbar-dropdown-item-active-background-color: $scheme-main;

$dropdown-item-hover-color: $text;
$dropdown-item-hover-background-color: $scheme-main-ter;
$dropdown-item-active-color: $primary;
$dropdown-item-active-background-color: $scheme-main;

$button-color: $text;
$button-background-color: $scheme-main;
$button-border-color: transparent;
$button-hover-color: $text;
$button-hover-border-color: $scheme-invert-ter;
$button-focus-color: $button-color;
$button-focus-border-color: $button-hover-border-color;
$button-active-color: $button-color;
$button-active-border-color: $button-hover-border-color;

$tag-background-color: $grey-darker;
$tag-color: $text;

body {
    font-family: 'Open Sans', sans-serif;
    font-size: 1rem;
    font-weight: 400;
    line-height: 1.5;
    text-align: left;
}

// 4. Setup your Custom Colors
// $linkedin: #0077b5;
// $linkedin-invert: findColorInvert($linkedin);
// $twitter: #55acee;
// $twitter-invert: findColorInvert($twitter);
// $github: #333;
// $github-invert: findColorInvert($github);

// 5. Add new color variables to the color map.
@import "../bulma-0.9.1/sass/utilities/derived-variables";
// $addColors: (
//   "twitter":($twitter, $twitter-invert),
//   "linkedin": ($linkedin, $linkedin-invert),
//   "github": ($github, $github-invert)
// );
// $colors: map-merge($colors, $addColors);

// 6. Import the rest of Bulma
// To override any of these variables ($primary etc.), just set them before importing Bulma.
// imports everything: @import "../bulma-0.9.1/bulma.sass";
//@import "../bulma-0.9.1/bulma.sass";
// Import only what you need from Bulma
// NOTE: order important !
@import "../bulma-0.9.1/sass/utilities/_all.sass";
@import "../bulma-0.9.1/sass/base/_all.sass";
@import "../bulma-0.9.1/sass/components/dropdown.sass";
@import "../bulma-0.9.1/sass/components/navbar.sass";
@import "../bulma-0.9.1/sass/elements/button.sass";
@import "../bulma-0.9.1/sass/elements/container.sass";
// deprecated use /form/_all.sass @import "../bulma-0.9.1/sass/elements/form.sass";
@import "../bulma-0.9.1/sass/elements/icon.sass";
@import "../bulma-0.9.1/sass/elements/image.sass";
@import "../bulma-0.9.1/sass/elements/other.sass";
@import "../bulma-0.9.1/sass/elements/table.sass";
@import "../bulma-0.9.1/sass/elements/tag.sass";
@import "../bulma-0.9.1/sass/elements/title.sass";
@import "../bulma-0.9.1/sass/form/_all.sass";
@import "../bulma-0.9.1/sass/grid/columns.sass";
@import "../bulma-0.9.1/sass/helpers/_all.sass";
@import "../bulma-0.9.1/sass/layout/hero.sass";
@import "../bulma-0.9.1/sass/layout/section.sass";

.purple-color{background-color: $purple !important; }
.pink-color{background-color: $pink !important; }
.blue-color { background-color: $blue !important; }
.dark-color { background-color: $dark !important; }
.red-color { background-color: $red !important; }
.green-color { background-color: $green !important; }
.purple-fcolor{ color: $purple !important; }
.pink-fcolor{color: $pink !important; }
.dgrey-fcolor { color: $dark !important; }
.blue-fcolor { color: $blue !important; }
.red-fcolor { color: $red !important; }
.green-fcolor { color: $green !important; }

hr { 
    display: block;
    margin: .5rem auto;
    border-style: inset;
    border-width: 1px;
    border-color: #fff;
}

.navbar-menu .navbar-start {
    width: 75%;
}
#searchbar-item {
    width: 85%;
    padding-right: 0.25rem;
}
// occupy full space when in burger menu
.navbar-menu.is-active .navbar-start {
    width: auto;
}
.navbar-menu.is-active #searchbar-item {
    width: auto;
    padding-right: 0.75rem;
}
// for search options icon being closer to search bar when not in burger menu
#search-opt-cog-icon {
    //padding-left: 0.25rem;
}
.navbar-menu.is-active #search-opt-cog-icon {
    //padding-left: 0.75rem;
}

// big font increases navbar size and burger symbol won't be centered vertically anymore
.navbar-burger {
    height: auto;
}
.is-nav-button {
    background-color: transparent;
    border: none !important;
    color: $text;
    cursor: pointer;
    justify-content: center;
    padding-bottom: calc(0.5em - 2px);
    padding-left: 1em;
    padding-right: 1em;
    padding-top: calc(0.5em - 2px);
    text-align: center;
    white-space: nowrap;
    //border-color: transparent;
    text-decoration: none;
}
.button.is-nav-button:focus:not(:active), .button.is-nav-button.is-focused:not(:active) {
    box-shadow: none;//0 0 0 0.125em rgba(255, 255, 255, 0.25);
    background-color: $scheme-main-ter;  // recently clicked nav-button
}
.button.is-nav-button:focus, .button.is-nav-button.is-focused {
    border-color: transparent;
    color: $text;
}
.button.is-nav-button:hover, .button.is-nav-button.is-hovered {
    border: none;
    color: $text;
    background-color: $scheme-main-bis;
}
.button.is-nav-button:active, .button.is-nav-button.is-active {
    border-color: $scheme-invert-bis;
    color: $text;
}

.mdb-navbar-brand {
    font-size: 1.75rem;
}

.page-nav {
    position: fixed;
    top: 0%;
    height: 100%;
    display: flex;
    align-items: center;
    padding: 0 0.3em;
    font-size: 4em;
    font-weight: bold;
}
.page-nav:hover {
    color: #f34c4c;
    background-color: #7575750f;
}
#page-next {
    right: 0;
}
#page-prev {
    left: 0;
}

.field.has-addons {
    .control:not(:last-child) .file-name {
        border-bottom-right-radius: 0;
        border-top-right-radius: 0;
    }
}

.book-info-table {
    //  Using @extend lets you share a set of CSS properties from one selector to another
    @extend .table;
    background-color: $body-background-color;
    color: $text;
    // sass allows nesting: nav { ul {..} } is the same as: nav ul {..}
    td, th {
        border: none;
        padding: 0.35em 0.5em;
    }

    th {
        color: $scheme-invert-ter;
        white-space: nowrap;
    }
}
.book-info-table.has-one-fullwidth-td td {
    width: 100%;
}

.kw-headline hr {
    display: block;
    margin-top: 0;
    margin-bottom: .5rem;
    margin-left: auto;
    margin-right: auto;
    border-style: inset;
    border-width: 1px;
    border-color: #fff;
}
.kw-headline span {
    margin-left: .25rem;
    font-size: 1.25rem;
    letter-spacing: 1.5px;
}

.ext-info-container hr {
    display: block;
    margin-top: .2rem;
    margin-bottom: .2rem;
    margin-left: auto;
    margin-right: auto;
    border-style: inset;
    border-width: 1px;
    border-color: #2196f3;
}

.ext-info-title {
    font-size: 1.1rem;
}

.flash-messages {
   list-style: none;
   //margin-left: 0;
   padding-bottom: 1rem;
   color: $scheme-invert-ter;

    // overwrite bulma css message since flask's flash uses message as category by default
    .message {
        background-color: transparent;
        border: none;
        font-size: 1rem;
    }

    p label {
        font-weight: normal;
        margin-bottom: 0px;
    }
    p.info {
    }
    p.title {
        //font-size: 1.5rem;
        font-weight: bold;
        //margin-bottom: 0.5em 0;
    }
    p.warning {
        font-weight: bold;
        color: $mdb-warning; /* #f67764 */
    }

    a.underline {
        text-decoration: underline;
    }
}

.star-inactive {
    color: #fff !important;
}
.star-active {
    color: #22a7f0 !important;
}
#MyRating i:hover {
    color: #c00 !important;
}

/* flexbox solution for book-item-grid */
//.book-grid {
//    display: flex;
//    flex-wrap: wrap;
//    // fr -> fraction unit, 1fr for e.g. 4 cols each gets one fraction of the available space
//    // each gets 25% space
//    // grid-template-columns: repeat(2, 1fr);
//    //justify-items: stretch; /* Aligns grid items along the inline (row) axis */
//    align-items: stretch; /* how flex items are laid out along the cross axis on the current line */
//    justify-content: center; /* alignment along the main axis */
//    align-content: flex-start; /* aligns the container’s lines within when there is extra space in the cross-axis */
//    // grid-gap: 5px;
//}

//.book-grid-item {
//    // shorthand for flex-grow, flex-shrink and flex-basis
//    // 0 0 -> items don't grow or shrink and have equal size
//    // needs to use interpolation to embed the result of a SassScript expression
//    // into a chunk of CSS (wrap it with #{} )
//    // account for margin in flex main axis (here: 2*5px)
//    flex: 0 0 calc(100% / #{$book-grid-min-cols} - 10px);
//    display: inline-grid;
//    justify-items: stretch;//center;
//    justify-content: center;
//    align-items: stretch;
//    align-content: stretch;
//    /* grid-template-rows: 85% 15%; /1* manga cover takes 80% title 20% of height *1/ */
//    grid-template-rows: auto 50px; /* 2*line-height of book-grid-item-title + 5px top and bot margin */
//    margin: 5px;
//}
//.book-grid-item-cover {
//    // margin: .2rem;
//     /* setting min-width needed otherwise we get weird loading behaviour with
//      * css grid since all divs are collapsed and only a few pixels big and
//      * thus are all(60 books) visible in the middle of the screen and expand
//      * while loading and at the end size is re-calculated which makes grid
//      * "twitch" around, with a min-width this is avoided since the divs are
//      * spread out from the start and closer to their loaded pos/size */
//    min-width: 150px;
//}
//// use bulma breakpoints
//// mobile: up to 768px
//// tablet: from 769px
//// desktop: from 1024px
//// widescreen: from 1216px
//// fullhd: from 1408px
//// NOTE: widescreen and fullhd breakpoints can be disabled
//// either use them with $tablet or with mixin shorthand:
//// +tablet (shorthand for @include tablet; mixin tablet has to be defined
////          with indented mixin syntax using '=' instead of @mixin)
//// compiles to:
//// @media screen and (min-width: $tablet)
////   @content
//// max for mobile rest min-width and mobile is just $table -1px
//@media only screen and (min-width: 600px) {
//    .book-grid-item {
//        flex: 0 0 calc(100% / #{$book-grid-mobile-cols} - 10px);
//    }
//}
//@media only screen and (min-width: $tablet) {
//    .book-grid-item {
//        flex: 0 0 calc(100% / #{$book-grid-tablet-cols} - 10px);
//    }
//}
//@media only screen and (min-width: $desktop) {
//    .book-grid-item {
//        flex: 0 0 calc(100% / #{$book-grid-desktop-cols} - 10px);
//    }
//}
//@media only screen and (min-width: $widescreen) {
//    .book-grid-item {
//        flex: 0 0 calc(100% / #{$book-grid-widescreen-cols} - 10px);
//    }
//}
//@media only screen and (min-width: $fullhd) {
//    .book-grid-item {
//        flex: 0 0 calc(100% / #{$book-grid-fullhd-cols} - 10px);
//    }
//}

$book-grid-min-cols: 2;
$book-grid-mobile-cols: 3;
$book-grid-tablet-cols: 4;
$book-grid-desktop-cols: 4;
$book-grid-widescreen-cols: 5;
$book-grid-fullhd-cols: 6;

// sass: comments using /* */ are (usually, not in compressed mode) compiled to CSS, // are not

// to make all book-grid-items the same size i could either specify a fixed size(min/width/height)
// in px or % for the items -> no resizing not rly responsive or i could use bootstraps cols and add
// col-md-2 col-sm-4 col-xs-6 no-padding to book-grid-item's div classes
// or i could use grid and alter the nr of cols it hast based on viewport size
// with grid-template-columns: auto auto .. nr_of_cols*auto (auto for auto size)
// could either use grid with repeat(nr_cols, 1fr) to get equally sized items the only problem
// being that orphans(left over items) on the last row won't be centered that is only
// possible with some really ugly hacks (items spanning multiple columns and then detecting
// which n-th last item it is etc.)
// -> flexbox is better suited for this; just using flex-wrap: wrap; and justify-content: center
//    on the container and flex: 0 0 calc(100% / nr_cols); on the items
// flexbox then has the problem that the rows aren't equal height and the only way to make them
// have equal height is use a fixed height so in the end the grid solution with non-centered
// orphans looks better
.book-grid {
    display: grid;
    // fr -> fraction unit, 1fr for e.g. 4 cols each gets one fraction of the available space
    // each gets 25% space
    // double the columns since children span 2 columns so we can center orphans
    // sass supports math operations
    grid-template-columns: repeat($book-grid-min-cols, 1fr);
    justify-items: stretch; /* Aligns grid items along the inline (row) axis */
    align-items: stretch; /* Aligns grid items along the block (column) axis */
    justify-content: center; /* align the whole grid inside the container */
    align-content: start; /* vertically align the whole grid inside the container */
    grid-gap: 5px;
    //
    // could also use minmax(min, max); that keeps it between a min and max
    // specifies the size of an implicitly-created grid row track (created when
    // not specified in grid-template-rows)
    grid-auto-rows: 1fr;  // equal height rows
}
.book-grid-item {
    display: inline-grid;
    justify-items: stretch;//center;
    justify-content: center;
    align-items: stretch;
    align-content: stretch;
    /* grid-template-rows: 85% 15%; /1* manga cover takes 80% title 20% of height *1/ */
    grid-template-rows: auto 50px; /* 2*line-height of book-grid-item-title + 5px top and bot margin */
}
.book-grid-item-cover {
     /* setting min-width needed otherwise we get weird loading behaviour with
      * css grid since all divs are collapsed and only a few pixels big and
      * thus are all(60 books) visible in the middle of the screen and expand
      * while loading and at the end size is re-calculated which makes grid
      * "twitch" around, with a min-width this is avoided since the divs are
      * spread out from the start and closer to their loaded pos/size */
    min-width: 150px;
}

// :nth-child(An+B)
// 
// matches an element that has an+b-1 siblings in front of it
// <An+B>
//     Represents elements in a list whose indices match those found in a
//     custom pattern of numbers, defined by An+B, where:
//     A is an integer step size,
//     B is an integer offset,
//     n is all positive integers, starting from 0.
//     It can be read as the An+Bth element of a list. 
// Element indices are 1-based.
// 2n+0 -> even
// 2n+1 -> odd

/* use 2x the columns with grid-column: span 2; on the children and define
   selectors for orphans inside media queries
   gets reaaaaly ugly real quick since you have to define selectors for
   every orphan for every nr of possilbe orphans while also having
   to overwrite previous selectors first */
// for 2 cols -> odd child is one left over
// .book-grid-item:last-child:nth-child(2n+1) {
//     grid-column-end: -2;
// }
// @media only screen and (min-width: 600px) {
//     .book-grid {
//         grid-template-columns: repeat($book-grid-mobile-cols * 2, 1fr);
//     }

//     // reset all
//     .book-grid-item {
//         grid-column-end: auto;
//     }

//     // 2 orphans
//     // 3 cols last child
//     .book-grid-item:last-child:nth-child(3n-1) {
//         grid-column-end: -2;
//     }
//     // 3 cols 2nd last child
//     .book-grid-item:nth-last-child(2):nth-child(3n+1) {
//         grid-column-end: 4;
//     }

//     // 1 orphan
//     .book-grid-item:last-child:nth-child(3n-2) {
//         grid-column-end: 5;
//     }
// }

// use bulma breakpoints
// mobile: up to 768px
// tablet: from 769px
// desktop: from 1024px
// widescreen: from 1216px
// fullhd: from 1408px
// NOTE: widescreen and fullhd breakpoints can be disabled
// either use them with $tablet or with mixin shorthand:
// +tablet (shorthand for @include tablet; mixin tablet has to be defined
//          with indented mixin syntax using '=' instead of @mixin)
// compiles to:
// @media screen and (min-width: $tablet)
//   @content
// max for mobile rest min-width and mobile is just $table -1px
@media only screen and (min-width: 600px) {
    .book-grid {
        grid-template-columns: repeat($book-grid-mobile-cols, 1fr);
    }
}
@media only screen and (min-width: $tablet) {
    .book-grid {
        grid-template-columns: repeat($book-grid-tablet-cols, 1fr);
    }
}
@media only screen and (min-width: $desktop) {
    .book-grid {
        grid-template-columns: repeat($book-grid-desktop-cols, 1fr);
    }
}
@media only screen and (min-width: $widescreen) {
    .book-grid {
        grid-template-columns: repeat($book-grid-widescreen-cols, 1fr);
    }
}
@media only screen and (min-width: $fullhd) {
    .book-grid {
        grid-template-columns: repeat($book-grid-fullhd-cols, 1fr);
    }
}
// defining breakpoints >$fullhd is not sensible unless we also define new breakpoints
// for .container that limits content to max-width

.book-grid-item-cover:hover .overlay {
    display: block;
}
.book-grid-item-cover a {
    color: #fff;
}
.book-grid-item-cover a:hover, .book-grid-item-cover a:focus {
    color: #fff;
}
.book-grid-item-cover img {
    width: 100%;
    height: 100%;
    object-fit: fill;
}
.book-grid-item .book-grid-item-cover:hover .book-grid-item-inner {
    border-color: #44a6f2!important;
}
.book-grid-item.read .book-grid-item-cover:hover .book-grid-item-inner {
    border-color: #31c131!important;
}
.book-grid-item.reading .book-grid-item-cover:hover .book-grid-item-inner {
    border-color: #ffe000!important;
}
.book-grid-item-inner {
    position: relative; /* so we can place title on bottom of div */
    border: 2px solid transparent; /* transparent border so items dont get moved when we show it; didnt work with box-sizing: border-box; since we dont have a specified height*/
    /* fill full w+h so img can as well */
    width: 100%;
    height: 100%;
    -webkit-border-radius: 10px;
    -khtml-border-radius: 10px;
    -moz-border-radius: 10px;
    -ms-border-radius: 10px;
    -o-border-radius: 10px;
    border-radius: 10px;
    overflow: hidden; /* needed for rounded corners with border-radius */
}
/* for bottom cover border */
/* .book-grid-item-inner:after { */
/*     position: absolute; */
/*     content: ''; */
/*     border-bottom: 3px solid rgba(68, 166, 242, 1); */
/*     width: 100%; */
/*     border-radius: 10px; */
/*     /1* transform: translateX(-20%); *1/ */
/*     bottom: 0; */
/*     left: 0; */
/* } */
/* .book-grid-item.read .book-grid-item-inner:after { */
/*     border-color: #31c131!important; */
/* } */
/* .book-grid-item.reading .book-grid-item-inner:after { */
/*     border-color: #ffe000!important; */
/* } */
/* .book-grid-item:hover .book-grid-item-inner:after { */
/*     border: none; */
/* } */
.book-grid-item .overlay {
    display: none;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    font-size: 1.25rem;
    font-weight: bold;
    font-family: 'Open Sans',sans-serif;
    text-align: center;
    color: $text;
    background: rgba(0,0,0,.5);
}
.book-grid-item .overlay-data {
    margin-top: .5rem;
}
.book-grid-item .overlay-data .overlay-title {
    margin-bottom: .2rem;
}
.book-grid-item .overlay-data .overlay-artist {
    margin-bottom: .2rem;
    font-size: 1.15rem;
    font-weight: 600;
}
.book-grid-item .overlay-data .overlay-pages {
    font-size: .85rem;
}
.book-grid-item .overlay-data .overlay-rate {
    color: #44a6f2;
}
.book-grid-item.read .overlay-data .overlay-rate {
    color: #31c131!important;
}
.book-grid-item.reading .overlay-data .overlay-rate {
    color: #ffe000!important;
}
.book-grid-item .overlay-button {
    @extend .button;
    background-color: transparent;
    position: absolute;
    left: 0;
    right: 0;
    bottom: .75rem;
    margin-left: 1rem;
    margin-right: 1rem;
    font-size: 1.25rem;
    color: #fff!important;
    border: 2px solid #fff;
}
.book-grid-item .overlay-button:hover {
    background-color: $blue;
}
.book-grid-item.read .overlay-button:hover {
    background-color: $mdb-green!important;
}
.book-grid-item.reading .overlay-button:hover {
    background-color: #ffe000!important;
    color: #2d2d2d!important;
}
.book-grid-item-title {
    /* for cover overlayed with title at bottom */
    /* position: absolute; */
    /* bottom: 0; */
    text-align: center;
    font-weight: bold;
    font-family: 'Open Sans', sans-serif;
    color: #fff;
    font-size: 0.9rem;
    width: 100%;
    /* height: 30px; */
    /* max-height: 70px; */
    line-height: 20px;
    /* background: rgba(0,0,0,.75); */
    /* background: linear-gradient(to top, hsla(0, 0%, 0%, 0.8), transparent); */
    /* for aligning title at the bottom of the container */
    /* display: flex; */
    /* justify-content: center; */
    /* align-items: flex-end; */
    position: relative; /* so :after element is positioned correctly when using absolute */
    margin-top: 5px;
}
/* .book-grid-item:hover .book-grid-item-title { */
/*     display: none; */
/* } */
.book-grid-item-title:after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    transform: scaleX(0.85);
    width: 100%;
    border-top: 2px solid #44a6f2;
}
.book-grid-item.read .book-grid-item-title:after {
    border-color: #31c131!important;
}
.book-grid-item.reading .book-grid-item-title:after {
    border-color: #ffe000!important;
}
// <a> tag is an inline element, you can only apply ellipsis to a block element
.book-grid-item-title > span, .book-grid-item-title > a {
    text-align: center;
    overflow: hidden;
    white-space: normal; /* ellipsis only works with: nowrap, and then you need max-width/height */
    text-overflow: ellipsis;
    display: inline-block;  // needs to be block or inline-block for overflow hidden
    max-height: 40px; /* 2*line-height of book-grid-item-title ? */
    /* padding: 5px 0; */
    margin: 5px 0;
}
/* src: https://www.cssportal.com/css-ribbon-generator/ */
.ribbon.fav {
  position: absolute;
  right: -5px; top: -5px;
  z-index: 1;
  overflow: hidden;
  width: 75px; height: 75px;
  text-align: right;
}
.ribbon.fav span {
  font-size: 10px;
  font-weight: bold;
  color: #FFF;
  text-transform: uppercase;
  text-align: center;
  line-height: 20px;
  transform: rotate(45deg);
  -webkit-transform: rotate(45deg);
  width: 100px;
  display: block;
  background: #79A70A;
  background: linear-gradient(#FF468E 0%, #BA3368 100%);
  box-shadow: 0 3px 10px -5px rgba(0, 0, 0, 1);
  position: absolute;
  top: 19px; right: -21px;
}
.ribbon.fav span::before {
  content: "";
  position: absolute; left: 0px; top: 100%;
  z-index: -1;
  border-left: 3px solid #BA3368;
  border-right: 3px solid transparent;
  border-bottom: 3px solid transparent;
  border-top: 3px solid #BA3368;
}
.ribbon.fav span::after {
  content: "";
  position: absolute; right: 0px; top: 100%;
  z-index: -1;
  border-left: 3px solid transparent;
  border-right: 3px solid #BA3368;
  border-bottom: 3px solid transparent;
  border-top: 3px solid #BA3368;
}
.book-grid-item-cover:hover .ribbon.fav {
    display: none;
}
.book-grid-item-cover:hover img {
    filter: blur(2px);
}
.addon-button {
    margin-right: 0;
    border-top-right-radius: 0;
    border-bottom-right-radius: 0;
}
// another button following
.addon-button + .addon-button {
    margin-left: -.4rem;
    .button {
        border-top-left-radius: 0;
        border-bottom-left-radius: 0;
    }
}
.button-border-sep {
    border-left: 2px solid $button-hover-border-color;
}

.books-collection-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    justify-items: stretch; /* Aligns grid items along the inline (row) axis */
    align-items: stretch; /* Aligns grid items along the block (column) axis */
    justify-content: flex-start; /* align the whole grid inside the container */
    align-content: start; /* vertically align the whole grid inside the container */
    grid-gap: 5px;
}
/* Device-width refers to the display's resolution (eg. the 1024 from
 * 1024x768), while width refers to the width of the browser itself */
@media only screen and (min-width: 650px) {
    .books-collection-grid {
        grid-template-columns: repeat(3, 1fr);
    }
}
@media only screen and (min-width: 850px) {
    .books-collection-grid {
        grid-template-columns: repeat(4, 1fr);
    }
}
@media only screen and (min-width: $desktop) {
    .books-collection-grid {
        grid-template-columns: repeat(4, 1fr);
    }
}
@media only screen and (min-width: $widescreen) {
    .books-collection-grid {
        grid-template-columns: repeat(5, 1fr);
    }
}
@media only screen and (min-width: $fullhd) {
    .books-collection-grid {
        grid-template-columns: repeat(6, 1fr);
    }
}
.book-grid-item-collection {
    display: flex;
    flex-direction: column;
    align-content: stretch;
    align-items: center;
}
.book-grid-item-collection .book-grid-item {
    height: 100%;
}

.tcol-full-width {
    width: 100%;
}

.tag-text-input {
    width: 100%;
    line-height: 1.5rem;
}
